name: CI and Deploy Workflow
# test yaml
on:
  push:
    branches:
    - main
    - develop
    - test/daniel
    paths:
    - 'my_images/node_app/**'
  pull_request:
    branches:
    - main
    - develop
    paths:
    - 'my_images/node_app/**'

jobs:
  # CI Job - Testea las diferentes versiones de node
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14, 16, 18 ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      working-directory: ./my_images/node_app
      run: npm install

    - name: Run tests
      working-directory: ./my_images/node_app
      run: npm test

  # Testea credenciales AWS
  test-aws-credentials:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: List S3 Buckets (Optional)
      run: |
        echo "Listing S3 buckets..."
        aws s3 ls

  # Crea y hace un deploy de la imagen de docker
  build_and_deploy:
    runs-on: ubuntu-latest
    needs: test-aws-credentials
    if: ${{github.event.workflow_run.conclusion == 'success'}}

    steps:
    - name: Check out repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

    - name: Log into Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'
        registry-type: private

    - name: Build Docker image
      run: |
        docker build -t my-app ./my_images/node_app
        docker tag my-app:latest 248189943700.dkr.ecr.eu-west-2.amazonaws.com/repositorio-grupo-dos:node

    - name: Check if image exists in ECR
      id: check_image
      run: |
        set +e
        IMAGE_EXISTS=$(aws ecr describe-images --repository-name repositorio-grupo-dos --image-ids imageTag=node)
        echo "::set-output name=image_exists::$IMAGE_EXISTS"
        set -e
      continue-on-error: true

    - name: Push Docker image to ECR
      run: |
        docker push 248189943700.dkr.ecr.eu-west-2.amazonaws.com/repositorio-grupo-dos:node
    outputs:
      image_exists: ${{ steps.check_image.outputs.image_exists }}

  # Deploy del Infra Job
  deploy_infra:
    needs: build_and_deploy
    if: ${{ needs.build_and_deploy.outputs.image_exists == '' }}
    uses: campusdualdevopsGrupo2/infra-resources/.github/workflows/deploy_app_node.yml@main

  # Actualiza el Task Job
  update_task:
    needs: build_and_deploy
    if: ${{ needs.build_and_deploy.outputs.image_exists != '' }}
    uses: campusdualdevopsGrupo2/infra-resources/.github/workflows/update_node_task.yml@main
